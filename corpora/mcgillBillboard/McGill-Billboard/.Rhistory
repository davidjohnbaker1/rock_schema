axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
#Set number of simulations
nSims <- 100000 #number of simulated experiments
M<-106 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-26 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-100
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.05)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,0.05),  ylim=c(0, nSims))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
M<-100 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-51 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-100
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.05)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,0.05),  ylim=c(0, nSims))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
M<-107 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-51 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-100
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.05)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,0.05),  ylim=c(0, nSims))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
nSims <- 100000 #number of simulated experiments
M<-107 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-51 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-100
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.05)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,0.05),  ylim=c(0, 10000))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
M<-108 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-51 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-100
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.05)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,0.05),  ylim=c(0, 10000))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
#dev.off()
power
nSims <- 100000 #number of simulated experiments
M<-106 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-56 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-20
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
M<-106 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-51 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-20
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.05)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
power
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,1),  ylim=c(0, nSims))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
#dev.off()
#Å  Da
(sum(p < 0.01)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,1),  ylim=c(0, nSims))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
power
M<-106 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-51 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-20
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.01)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,1),  ylim=c(0, nSims))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
#dev.off()
power
(sum(p < 0.05)/nSims)
rock
rock
rock[AbsoluteTonic == 0]
table(rock[AbsoluteTonic == 0])
rock[AbsoluteTonic == 0]
rock[AbsoluteTonic == 0 & Song == "FortunateSon"]
rock
rock
rock[Song == "HappyTogether"]
rock[Song == "BohemianRhapsody"]
rock[Song == "PennyLane"]
rock[RootMotion > 0]
rock[RootMotion < 0]
rock[RootMotion < 0, .(RootMotion := RootMotion + 12)]
rock[RootMotion < 0, .(RootMotion == RootMotion + 12)]
rock
rock[RootMotion < 0, RootMotion := RootMotion + 12]
RootMotion + 12
rock[RootMotion < 0, list(RootMotion := RootMotion + 12)]
str(rock)
rock[RootMotion < 0, list(RootMotion := RootMotion + 12)]
rock[RootMotion < 0, list(RootMotion = RootMotion + 12)]
rock
rock[1:50]
rock <- data.table(chord_by_chord)
setnames(rock, c("X1", "X2", "X3", "X4", "X5", "X6", "X7","X8"),
c("Song","Artist","Year","Time","Chord","AbsoluteTonic","RomanNumeral","Quality"))
#======================================================================================================D
# Descriptives
unique(rock$Song)
# 730 Different Songs in Database
#======================================================================================================
# Data Exploration
#--------------------------------------------------
# Define Search Query Terms
maj <- "maj"
min <- "min"
# Find Songs Chord
rock[AbsoluteTonic == 0]
rock[AbsoluteTonic == 0 & Song == "FortunateSon"]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, maj)]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, min)]
# Figure Out If Song is probably major or minor
# rock1 <- rock[X$RomanNumeral == "I", .(X5), by=Song]
# # Loose three songs where we don't have I chord
# rock2 <- unique(rock1)
#
# maj_index <- str_detect(rock2$Chord, maj)
# min_index <- str_detect(rock2$Chord, min)
# major_songs <- rock2[maj_index]
# minor_songs <- rock2[min_index]
# unique(major_songs$Song)
#
# major_song_list <- unique(major_songs$Song)
# minor_song_list <- unique(minor_songs$Song)
# # 576 + 148 = 724
#
# temp <- rock[ Chord == "I", .(Chord), by=Song]
# unique(temp)
# Happy Together
#======================================================================================================
# Add Root motion Colum
rock[, RootMotion := diff(AbsoluteTonic)]
# Convert all to Positive Intergers
str(rock)
rock[RootMotion < 0, list(PosRootMotion = RootMotion + 12)]
rock[1:50]
rock[RootMotion < 0]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, maj)]
rock[RootMotion < 0]
rock[RootMotion < 0, PositiveRoot := RootMotion + 12]
rock
rock[RootMotion <= 0, PositiveRoot := RootMotion + 12]
rock
rock <- data.table(chord_by_chord)
setnames(rock, c("X1", "X2", "X3", "X4", "X5", "X6", "X7","X8"),
c("Song","Artist","Year","Time","Chord","AbsoluteTonic","RomanNumeral","Quality"))
#======================================================================================================D
# Descriptives
unique(rock$Song)
# 730 Different Songs in Database
#======================================================================================================
# Data Exploration
#--------------------------------------------------
# Define Search Query Terms
maj <- "maj"
min <- "min"
# Find Songs Chord
rock[AbsoluteTonic == 0]
rock[AbsoluteTonic == 0 & Song == "FortunateSon"]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, maj)]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, min)]
# Figure Out If Song is probably major or minor
# rock1 <- rock[X$RomanNumeral == "I", .(X5), by=Song]
# # Loose three songs where we don't have I chord
# rock2 <- unique(rock1)
#
# maj_index <- str_detect(rock2$Chord, maj)
# min_index <- str_detect(rock2$Chord, min)
# major_songs <- rock2[maj_index]
# minor_songs <- rock2[min_index]
# unique(major_songs$Song)
#
# major_song_list <- unique(major_songs$Song)
# minor_song_list <- unique(minor_songs$Song)
# # 576 + 148 = 724
#
# temp <- rock[ Chord == "I", .(Chord), by=Song]
# unique(temp)
# Happy Together
#======================================================================================================
# Add Root motion Colum
rock[, RootMotion := diff(AbsoluteTonic)]
# Convert all to Positive Intergers
str(rock)
rock[RootMotion >= 0, PositiveRoot := RootMotion]
rock
rock <- rock[RootMotion < 0, PositiveRoot := RootMotion + 12]
rock <- data.table(chord_by_chord)
setnames(rock, c("X1", "X2", "X3", "X4", "X5", "X6", "X7","X8"),
c("Song","Artist","Year","Time","Chord","AbsoluteTonic","RomanNumeral","Quality"))
#======================================================================================================D
# Descriptives
unique(rock$Song)
# 730 Different Songs in Database
#======================================================================================================
# Data Exploration
#--------------------------------------------------
# Define Search Query Terms
maj <- "maj"
min <- "min"
# Find Songs Chord
rock[AbsoluteTonic == 0]
rock[AbsoluteTonic == 0 & Song == "FortunateSon"]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, maj)]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, min)]
# Figure Out If Song is probably major or minor
# rock1 <- rock[X$RomanNumeral == "I", .(X5), by=Song]
# # Loose three songs where we don't have I chord
# rock2 <- unique(rock1)
#
# maj_index <- str_detect(rock2$Chord, maj)
# min_index <- str_detect(rock2$Chord, min)
# major_songs <- rock2[maj_index]
# minor_songs <- rock2[min_index]
# unique(major_songs$Song)
#
# major_song_list <- unique(major_songs$Song)
# minor_song_list <- unique(minor_songs$Song)
# # 576 + 148 = 724
#
# temp <- rock[ Chord == "I", .(Chord), by=Song]
# unique(temp)
# Happy Together
#======================================================================================================
# Add Root motion Colum
rock[, RootMotion := diff(AbsoluteTonic)]
# Convert all to Positive Intergers
str(rock)
rock <- rock[RootMotion < 0, PositiveRoot := RootMotion + 12]
rock <- rock[RootMotion >= 0, PositiveRoot := RootMotion]
rock
rock <- data.table(chord_by_chord)
setnames(rock, c("X1", "X2", "X3", "X4", "X5", "X6", "X7","X8"),
c("Song","Artist","Year","Time","Chord","AbsoluteTonic","RomanNumeral","Quality"))
#======================================================================================================D
# Descriptives
unique(rock$Song)
# 730 Different Songs in Database
#======================================================================================================
# Data Exploration
#--------------------------------------------------
# Define Search Query Terms
maj <- "maj"
min <- "min"
# Find Songs Chord
rock[AbsoluteTonic == 0]
rock[AbsoluteTonic == 0 & Song == "FortunateSon"]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, maj)]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, min)]
#======================================================================================================
# Add Root motion Colum
rock[, RootMotion := diff(AbsoluteTonic)]
# Convert all to Positive Intergers
str(rock)
rock[RootMotion < 0, PositiveRoot := RootMotion + 12]
rock
rock[RootMotion >= 0]
rock <- data.table(chord_by_chord)
setnames(rock, c("X1", "X2", "X3", "X4", "X5", "X6", "X7","X8"),
c("Song","Artist","Year","Time","Chord","AbsoluteTonic","RomanNumeral","Quality"))
#======================================================================================================D
# Descriptives
unique(rock$Song)
# 730 Different Songs in Database
#======================================================================================================
# Data Exploration
#--------------------------------------------------
# Define Search Query Terms
maj <- "maj"
min <- "min"
# Find Songs Chord
rock[AbsoluteTonic == 0]
rock[AbsoluteTonic == 0 & Song == "FortunateSon"]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, maj)]
rock[AbsoluteTonic == 3 & str_detect(rock$Quality, min)]
#======================================================================================================
# Add Root motion Colum
rock[, RootMotion := diff(AbsoluteTonic)]
# Convert all to Positive Intergers
str(rock)
if(rock$RootMotion < 0){
rock$PosRootMotion <- rock$RootMotion +12
} else {
rock$PosRootMotion <- rock$RootMotion
}
rock
rock < - if(rock$RootMotion < 0){
rock$PosRootMotion <- rock$RootMotion + 12
} else {
rock$PosRootMotion <- rock$RootMotion
}
rock
with(rock, ifelse(RootMotion <0 , RootMotion + 12 , RootMotion))
with(rock, ifelse(RootMotion >= 0 , RootMotion , RootMotion + 12))
rock$PosRootMotion <- with(rock, ifelse(RootMotion >= 0 , RootMotion , RootMotion + 12))
rock
rock[1:150]
rock[1:50]
rock[PosRootMotion == NA]
rock[PosRootMotion == "NA"]
table(rock$PosRootMotion)
plot(table(rock$PosRootMotion))
ggplot(table(rock$PosRootMotion))) + geom_histogram()
ggplot(table(rock$PosRootMotion)) + geom_histogram()
rock[541,]
rock[530:550,]
rock
setwd("/Users/davidjohnbaker/Desktop/projects/relational_network/corpora/mcgillBillboard/McGill-Billboard")
fwrite(rock$PosRootMotion, "McGillBillBoard_PosRootMotion.csv")
rocky <- rock$PosRootMotion
rocky
fwrite(rocky, "McGillBillBoard_PosRootMotion.csv")
write.csv(rocky, "McGillBillBoard_PosRootMotion.csv")
rocky <- rock$PosRootMotion
write.csv(rock, "McGillBillBoard_PosRootMotion.csv")
write.csv(rock, "McGillBillBoard_PosRootMotion.krn")
rock
write.csv(rock[,c(7,10)], "McGillBillBoard_PosRootMotion.krn")
write.csv(rock[,c(10,7)], "McGillBillBoard_PosRootMotion.krn")
?grep
rock[PosRootMotion == 10]
tentable <- rock[PosRootMotion == 10]
table(tentable$RomanNumeral)
pie(table(tentable$RomanNumeral))
rock
rock[PosRootMotion == 10]
rock[PosRootMotion == 10]
rock[PosRootMotion == 10]
?rownames
rocky <- rock
rocky[, Index = .I ]
rocky[, Index == .I ]
rocky[  , .I[PosRootMotion == "10"] ]
rocky[261]
rocky[540:556]
rocky
rocky[  , .I[PosRootMotion == "10"]]
rownameswhererootequalsten <- rocky[  , .I[PosRootMotion == "10"]]
rownameswhererootequalstenOne <- rownameswhererootequalsten + 1
rownameswhererootequalsten
rownameswhererootequalstenOne
rocky[rownameswhererootequalsten]
rocky[rownameswhererootequalstenOne]
pie(rocky$RomanNumeral[rownameswhererootequalstenOne])
rocky$RomanNumeral[rownameswhererootequalstenOne])
rocky$RomanNumeral[rownameswhererootequalstenOne]
pie(rocky$RomanNumeral[rownameswhererootequalstenOne])
str(rocky$RomanNumeral[rownameswhererootequalstenOne])
table(rocky$RomanNumeral[rownameswhererootequalstenOne])
pie(table(rocky$RomanNumeral[rownameswhererootequalstenOne]))
pie(table(rocky$PosRootMotion[rownameswhererootequalstenOne]))
?lag
lead(1:10, 1)
lead(1:10, 2)
lag(1:10, 1)
lead(1:10, 1)
x <- runif(5)
cbind(ahead = lead(x), x, behind = lag(x))
library(dplyr)
lead(1:10, 1)
lead(1:10, 2)
lag(1:10, 1)
lead(1:10, 1)
x <- runif(5)
cbind(ahead = lead(x), x, behind = lag(x))
system(grep -A3 "10" rock)
system(grep -A3 10 rock)
